import asyncio
from datetime import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"

# –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_reminders = {}

# –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π (–∫—É—Ä—Å, –≤—Ä–µ–º—è)
schedule = [
    ("Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", time(10, 0)),   # 10:00
    ("–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", time(14, 30)),  # 14:30
    ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Django", time(18, 0)),  # 18:00
]

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    job = context.job
    chat_id = job.chat_id

    if chat_id in user_reminders and user_reminders[chat_id]:
        message = "üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä—Å–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        for course, course_time in schedule:
            message += f"üìÖ *{course}* –≤ {course_time.strftime('%H:%M')}\n"

        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminders(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    if chat_id in user_reminders and user_reminders[chat_id]:
        user_reminders[chat_id] = False
        await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        user_reminders[chat_id] = True
        context.job_queue.run_daily(send_reminders, time=time(9, 0), chat_id=chat_id)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 9:00
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ 9:00.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    keyboard = [["üìö –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤", "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"], ["üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ùì –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—É—Ä—Å–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_message = update.message.text.lower()

    if "–ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤" in user_message:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in user_message:
        schedule_text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:*\n\n"
        for course, course_time in schedule:
            schedule_text += f"üîπ *{course}* –≤ {course_time.strftime('%H:%M')}\n"
        await update.message.reply_text(schedule_text, parse_mode="Markdown")
    elif "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" in user_message:
        await reminders(update, context)
    elif "–ø–æ–º–æ—â—å" in user_message:
        help_text = (
            "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
            "üîπ *–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å?* ‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìö –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤¬ª.\n"
            "üîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É?* ‚Äî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ü–∏—è–º–∏.\n"
            "üîπ *–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é?* ‚Äî –í –∫–∞–∂–¥–æ–º –∫—É—Ä—Å–µ –µ—Å—Ç—å —á–∞—Ç.\n\n"
            "üìß *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* welfegorofficial@gmail.com"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reminders))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
